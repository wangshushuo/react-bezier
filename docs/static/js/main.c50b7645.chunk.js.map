{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["winWidth","window","innerWidth","scale","size","bezier","Bezier","addPoint","App","ref","useRef","useLayoutEffect","current","ctx","getContext","p","getPointArray","margin","base_x","base_y","beginPath","moveTo","lineTo","strokeStyle","stroke","closePath","fontWidth","font","fillText","fillStyle","index","i","length","point","x","y","element","arc","Math","PI","fill","lineWidth","y0","t","x1","bezier_x","y1","bezier_y","className","width","height","style","border","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c50b7645.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\nimport './App.css';\nimport Bezier from '@wangshushuo/bezierjs'\n\nconst winWidth = window.innerWidth;\nconst maxWidth = 720;\nconst scale = winWidth >= maxWidth ? 1 : winWidth / maxWidth;\n\nconst size = 500 * scale;\n\nconst bezier = new Bezier();\nbezier.addPoint(10 * scale, 10 * scale)\nbezier.addPoint(100 * scale, 300 * scale)\nbezier.addPoint(200 * scale, 20 * scale)\nbezier.addPoint(350 * scale, 400 * scale)\nbezier.addPoint(500 * scale, 20 * scale)\n\nfunction App() {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      const ctx = ref.current.getContext('2d');\n      if (!ctx) return;\n      const p = bezier.getPointArray();\n\n      const margin = size * 0.05;\n      const base_x = margin;\n      const base_y = size * 1.1 - margin;\n\n      // 画标尺\n      ctx.beginPath();\n      ctx.moveTo(base_x, base_x);\n      ctx.lineTo(base_x, base_y);\n      ctx.lineTo(base_y, base_y);\n      ctx.strokeStyle = 'darkred';\n      ctx.stroke();\n      ctx.closePath();\n\n      // 画刻度\n      const fontWidth = size / 100;\n      ctx.font = `${20 * scale}px serif`;\n      ctx.fillText(\"0\", base_x - 2 * fontWidth, base_y + 2 * fontWidth);\n      ctx.fillStyle = 'darkred';\n      for (let index = 1; index <= 10; index++) {\n        ctx.fillText(index + \"\", base_x + index * size / 10, base_y + 2 * fontWidth);\n      }\n      for (let index = 1; index <= 10; index++) {\n        ctx.fillText(index + \"\", base_x - 2 * fontWidth, base_y - index * size / 10);\n      }\n\n      // 画参考线\n      ctx.beginPath();\n      for (let i = 0; i < p.length; i++) {\n        const point = p[i];\n        if (i === 0) ctx.moveTo(base_x + point.x, base_y - point.y);\n        ctx.lineTo(base_x + point.x, base_y - point.y);\n      }\n      ctx.strokeStyle = 'darkgreen';\n      ctx.stroke();\n      ctx.closePath();\n\n      // 画控制点\n      for (let i = 0; i < p.length; i++) {\n        const element = p[i];\n        const x = base_x + element.x;\n        const y = base_y - element.y;\n        ctx.moveTo(x, y);\n        ctx.beginPath();\n        ctx.arc(x, y, fontWidth, 0, Math.PI * 2, true);\n        ctx.closePath();\n        ctx.fillStyle=\"darkgreen\"\n        ctx.fill()\n        ctx.fillText(i + \"\", x + 5, y + 2);\n      }\n      ctx.strokeStyle = 'darkgreen'\n      ctx.stroke();\n\n      // 画曲线\n      ctx.beginPath();\n      ctx.moveTo(base_x + p[0].x, base_y - p[0].y);\n      ctx.lineWidth = 2;\n      for (let index = 1; index < size; index++) {\n        const x0 = base_x;\n        const y0 = base_y;\n\n        const t = index / size;\n\n        // 画贝塞尔曲线\n        const x1 = x0 + bezier.bezier_x(t);\n        const y1 = y0 - bezier.bezier_y(t);\n\n        ctx.lineTo(x1, y1);\n      }\n      ctx.strokeStyle = 'blue';\n      ctx.stroke();\n      ctx.closePath();\n    }\n  })\n  return (\n    <div className=\"App\">\n      <h1>贝塞尔曲线</h1>\n      <canvas ref={ref} width={size * 1.1} height={size * 1.1} style={{ margin: 0, border: '1px solid #000' }}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}